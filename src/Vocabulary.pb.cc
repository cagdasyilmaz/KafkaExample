// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: Vocabulary.proto
// Protobuf C++ Version: 5.30.0-dev

#include "../include/Vocabulary.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr Synonym::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : synonym_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        turkish_meaning_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sample_sentences_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Synonym::Synonym(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Synonym_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SynonymDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SynonymDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SynonymDefaultTypeInternal() {}
  union {
    Synonym _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SynonymDefaultTypeInternal _Synonym_default_instance_;

inline constexpr Vocabulary::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : synonyms_related_words_{},
        word_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        macmillan_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        youglish_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reverso_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Vocabulary::Vocabulary(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(Vocabulary_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VocabularyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VocabularyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VocabularyDefaultTypeInternal() {}
  union {
    Vocabulary _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VocabularyDefaultTypeInternal _Vocabulary_default_instance_;
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_Vocabulary_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_Vocabulary_2eproto = nullptr;
const ::uint32_t
    TableStruct_Vocabulary_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::Synonym, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::Synonym, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::Synonym, _impl_.synonym_),
        PROTOBUF_FIELD_OFFSET(::Synonym, _impl_.turkish_meaning_),
        PROTOBUF_FIELD_OFFSET(::Synonym, _impl_.sample_sentences_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::Vocabulary, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::Vocabulary, _impl_.word_),
        PROTOBUF_FIELD_OFFSET(::Vocabulary, _impl_.synonyms_related_words_),
        PROTOBUF_FIELD_OFFSET(::Vocabulary, _impl_.macmillan_url_),
        PROTOBUF_FIELD_OFFSET(::Vocabulary, _impl_.youglish_url_),
        PROTOBUF_FIELD_OFFSET(::Vocabulary, _impl_.reverso_url_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::Synonym)},
        {12, -1, -1, sizeof(::Vocabulary)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_Synonym_default_instance_._instance,
    &::_Vocabulary_default_instance_._instance,
};
const char descriptor_table_protodef_Vocabulary_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\020Vocabulary.proto\"Y\n\007Synonym\022\n\n\002id\030\001 \001("
    "\005\022\017\n\007synonym\030\002 \001(\t\022\027\n\017turkish_meaning\030\003 "
    "\001(\t\022\030\n\020sample_sentences\030\004 \001(\t\"\206\001\n\nVocabu"
    "lary\022\014\n\004word\030\001 \001(\t\022(\n\026synonyms_related_w"
    "ords\030\002 \003(\0132\010.Synonym\022\025\n\rmacmillan_url\030\003 "
    "\001(\t\022\024\n\014youglish_url\030\004 \001(\t\022\023\n\013reverso_url"
    "\030\005 \001(\tb\006proto3"
};
static ::absl::once_flag descriptor_table_Vocabulary_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_Vocabulary_2eproto = {
    false,
    false,
    254,
    descriptor_table_protodef_Vocabulary_2eproto,
    "Vocabulary.proto",
    &descriptor_table_Vocabulary_2eproto_once,
    nullptr,
    0,
    2,
    schemas,
    file_default_instances,
    TableStruct_Vocabulary_2eproto::offsets,
    file_level_enum_descriptors_Vocabulary_2eproto,
    file_level_service_descriptors_Vocabulary_2eproto,
};
// ===================================================================

class Synonym::_Internal {
 public:
};

Synonym::Synonym(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Synonym_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Synonym)
}
inline PROTOBUF_NDEBUG_INLINE Synonym::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::Synonym& from_msg)
      : synonym_(arena, from.synonym_),
        turkish_meaning_(arena, from.turkish_meaning_),
        sample_sentences_(arena, from.sample_sentences_),
        _cached_size_{0} {}

Synonym::Synonym(
    ::google::protobuf::Arena* arena,
    const Synonym& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Synonym_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Synonym* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:Synonym)
}
inline PROTOBUF_NDEBUG_INLINE Synonym::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : synonym_(arena),
        turkish_meaning_(arena),
        sample_sentences_(arena),
        _cached_size_{0} {}

inline void Synonym::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.id_ = {};
}
Synonym::~Synonym() {
  // @@protoc_insertion_point(destructor:Synonym)
  SharedDtor(*this);
}
inline void Synonym::SharedDtor(MessageLite& self) {
  Synonym& this_ = static_cast<Synonym&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.synonym_.Destroy();
  this_._impl_.turkish_meaning_.Destroy();
  this_._impl_.sample_sentences_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Synonym::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Synonym(arena);
}
constexpr auto Synonym::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Synonym),
                                            alignof(Synonym));
}
constexpr auto Synonym::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Synonym_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Synonym::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Synonym>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Synonym::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Synonym>(), &Synonym::ByteSizeLong,
              &Synonym::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Synonym, _impl_._cached_size_),
          false,
      },
      &Synonym::kDescriptorMethods,
      &descriptor_table_Vocabulary_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        Synonym_class_data_ =
            Synonym::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* Synonym::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Synonym_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Synonym_class_data_.tc_table);
  return Synonym_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 54, 2> Synonym::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    Synonym_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Synonym>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string sample_sentences = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Synonym, _impl_.sample_sentences_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Synonym, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Synonym, _impl_.id_)}},
    // string synonym = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Synonym, _impl_.synonym_)}},
    // string turkish_meaning = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Synonym, _impl_.turkish_meaning_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(Synonym, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string synonym = 2;
    {PROTOBUF_FIELD_OFFSET(Synonym, _impl_.synonym_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string turkish_meaning = 3;
    {PROTOBUF_FIELD_OFFSET(Synonym, _impl_.turkish_meaning_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sample_sentences = 4;
    {PROTOBUF_FIELD_OFFSET(Synonym, _impl_.sample_sentences_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\7\0\7\17\20\0\0\0"
    "Synonym"
    "synonym"
    "turkish_meaning"
    "sample_sentences"
  }},
};

PROTOBUF_NOINLINE void Synonym::Clear() {
// @@protoc_insertion_point(message_clear_start:Synonym)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.synonym_.ClearToEmpty();
  _impl_.turkish_meaning_.ClearToEmpty();
  _impl_.sample_sentences_.ClearToEmpty();
  _impl_.id_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Synonym::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Synonym& this_ = static_cast<const Synonym&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Synonym::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Synonym& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:Synonym)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 id = 1;
          if (this_._internal_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_id(), target);
          }

          // string synonym = 2;
          if (!this_._internal_synonym().empty()) {
            const std::string& _s = this_._internal_synonym();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Synonym.synonym");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string turkish_meaning = 3;
          if (!this_._internal_turkish_meaning().empty()) {
            const std::string& _s = this_._internal_turkish_meaning();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Synonym.turkish_meaning");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string sample_sentences = 4;
          if (!this_._internal_sample_sentences().empty()) {
            const std::string& _s = this_._internal_sample_sentences();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Synonym.sample_sentences");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:Synonym)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Synonym::ByteSizeLong(const MessageLite& base) {
          const Synonym& this_ = static_cast<const Synonym&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Synonym::ByteSizeLong() const {
          const Synonym& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:Synonym)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string synonym = 2;
            if (!this_._internal_synonym().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_synonym());
            }
            // string turkish_meaning = 3;
            if (!this_._internal_turkish_meaning().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_turkish_meaning());
            }
            // string sample_sentences = 4;
            if (!this_._internal_sample_sentences().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_sample_sentences());
            }
            // int32 id = 1;
            if (this_._internal_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Synonym::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Synonym*>(&to_msg);
  auto& from = static_cast<const Synonym&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Synonym)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_synonym().empty()) {
    _this->_internal_set_synonym(from._internal_synonym());
  }
  if (!from._internal_turkish_meaning().empty()) {
    _this->_internal_set_turkish_meaning(from._internal_turkish_meaning());
  }
  if (!from._internal_sample_sentences().empty()) {
    _this->_internal_set_sample_sentences(from._internal_sample_sentences());
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Synonym::CopyFrom(const Synonym& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Synonym)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Synonym::InternalSwap(Synonym* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.synonym_, &other->_impl_.synonym_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.turkish_meaning_, &other->_impl_.turkish_meaning_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sample_sentences_, &other->_impl_.sample_sentences_, arena);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata Synonym::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Vocabulary::_Internal {
 public:
};

Vocabulary::Vocabulary(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Vocabulary_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Vocabulary)
}
inline PROTOBUF_NDEBUG_INLINE Vocabulary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::Vocabulary& from_msg)
      : synonyms_related_words_{visibility, arena, from.synonyms_related_words_},
        word_(arena, from.word_),
        macmillan_url_(arena, from.macmillan_url_),
        youglish_url_(arena, from.youglish_url_),
        reverso_url_(arena, from.reverso_url_),
        _cached_size_{0} {}

Vocabulary::Vocabulary(
    ::google::protobuf::Arena* arena,
    const Vocabulary& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, Vocabulary_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Vocabulary* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:Vocabulary)
}
inline PROTOBUF_NDEBUG_INLINE Vocabulary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : synonyms_related_words_{visibility, arena},
        word_(arena),
        macmillan_url_(arena),
        youglish_url_(arena),
        reverso_url_(arena),
        _cached_size_{0} {}

inline void Vocabulary::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Vocabulary::~Vocabulary() {
  // @@protoc_insertion_point(destructor:Vocabulary)
  SharedDtor(*this);
}
inline void Vocabulary::SharedDtor(MessageLite& self) {
  Vocabulary& this_ = static_cast<Vocabulary&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.word_.Destroy();
  this_._impl_.macmillan_url_.Destroy();
  this_._impl_.youglish_url_.Destroy();
  this_._impl_.reverso_url_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Vocabulary::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Vocabulary(arena);
}
constexpr auto Vocabulary::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Vocabulary, _impl_.synonyms_related_words_) +
          decltype(Vocabulary::_impl_.synonyms_related_words_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Vocabulary), alignof(Vocabulary), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Vocabulary::PlacementNew_,
                                 sizeof(Vocabulary),
                                 alignof(Vocabulary));
  }
}
constexpr auto Vocabulary::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_Vocabulary_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &Vocabulary::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<Vocabulary>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &Vocabulary::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<Vocabulary>(), &Vocabulary::ByteSizeLong,
              &Vocabulary::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(Vocabulary, _impl_._cached_size_),
          false,
      },
      &Vocabulary::kDescriptorMethods,
      &descriptor_table_Vocabulary_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        Vocabulary_class_data_ =
            Vocabulary::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* Vocabulary::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&Vocabulary_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(Vocabulary_class_data_.tc_table);
  return Vocabulary_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 59, 2> Vocabulary::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    Vocabulary_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Vocabulary>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string word = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Vocabulary, _impl_.word_)}},
    // repeated .Synonym synonyms_related_words = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Vocabulary, _impl_.synonyms_related_words_)}},
    // string macmillan_url = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Vocabulary, _impl_.macmillan_url_)}},
    // string youglish_url = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Vocabulary, _impl_.youglish_url_)}},
    // string reverso_url = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Vocabulary, _impl_.reverso_url_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string word = 1;
    {PROTOBUF_FIELD_OFFSET(Vocabulary, _impl_.word_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .Synonym synonyms_related_words = 2;
    {PROTOBUF_FIELD_OFFSET(Vocabulary, _impl_.synonyms_related_words_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string macmillan_url = 3;
    {PROTOBUF_FIELD_OFFSET(Vocabulary, _impl_.macmillan_url_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string youglish_url = 4;
    {PROTOBUF_FIELD_OFFSET(Vocabulary, _impl_.youglish_url_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string reverso_url = 5;
    {PROTOBUF_FIELD_OFFSET(Vocabulary, _impl_.reverso_url_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::Synonym>()},
  }}, {{
    "\12\4\0\15\14\13\0\0"
    "Vocabulary"
    "word"
    "macmillan_url"
    "youglish_url"
    "reverso_url"
  }},
};

PROTOBUF_NOINLINE void Vocabulary::Clear() {
// @@protoc_insertion_point(message_clear_start:Vocabulary)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.synonyms_related_words_.Clear();
  _impl_.word_.ClearToEmpty();
  _impl_.macmillan_url_.ClearToEmpty();
  _impl_.youglish_url_.ClearToEmpty();
  _impl_.reverso_url_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Vocabulary::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Vocabulary& this_ = static_cast<const Vocabulary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Vocabulary::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Vocabulary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:Vocabulary)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string word = 1;
          if (!this_._internal_word().empty()) {
            const std::string& _s = this_._internal_word();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Vocabulary.word");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // repeated .Synonym synonyms_related_words = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_synonyms_related_words_size());
               i < n; i++) {
            const auto& repfield = this_._internal_synonyms_related_words().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // string macmillan_url = 3;
          if (!this_._internal_macmillan_url().empty()) {
            const std::string& _s = this_._internal_macmillan_url();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Vocabulary.macmillan_url");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string youglish_url = 4;
          if (!this_._internal_youglish_url().empty()) {
            const std::string& _s = this_._internal_youglish_url();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Vocabulary.youglish_url");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string reverso_url = 5;
          if (!this_._internal_reverso_url().empty()) {
            const std::string& _s = this_._internal_reverso_url();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "Vocabulary.reverso_url");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:Vocabulary)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Vocabulary::ByteSizeLong(const MessageLite& base) {
          const Vocabulary& this_ = static_cast<const Vocabulary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Vocabulary::ByteSizeLong() const {
          const Vocabulary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:Vocabulary)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .Synonym synonyms_related_words = 2;
            {
              total_size += 1UL * this_._internal_synonyms_related_words_size();
              for (const auto& msg : this_._internal_synonyms_related_words()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string word = 1;
            if (!this_._internal_word().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_word());
            }
            // string macmillan_url = 3;
            if (!this_._internal_macmillan_url().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_macmillan_url());
            }
            // string youglish_url = 4;
            if (!this_._internal_youglish_url().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_youglish_url());
            }
            // string reverso_url = 5;
            if (!this_._internal_reverso_url().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_reverso_url());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Vocabulary::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Vocabulary*>(&to_msg);
  auto& from = static_cast<const Vocabulary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Vocabulary)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_synonyms_related_words()->MergeFrom(
      from._internal_synonyms_related_words());
  if (!from._internal_word().empty()) {
    _this->_internal_set_word(from._internal_word());
  }
  if (!from._internal_macmillan_url().empty()) {
    _this->_internal_set_macmillan_url(from._internal_macmillan_url());
  }
  if (!from._internal_youglish_url().empty()) {
    _this->_internal_set_youglish_url(from._internal_youglish_url());
  }
  if (!from._internal_reverso_url().empty()) {
    _this->_internal_set_reverso_url(from._internal_reverso_url());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Vocabulary::CopyFrom(const Vocabulary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vocabulary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Vocabulary::InternalSwap(Vocabulary* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.synonyms_related_words_.InternalSwap(&other->_impl_.synonyms_related_words_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.word_, &other->_impl_.word_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.macmillan_url_, &other->_impl_.macmillan_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.youglish_url_, &other->_impl_.youglish_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reverso_url_, &other->_impl_.reverso_url_, arena);
}

::google::protobuf::Metadata Vocabulary::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_Vocabulary_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
