// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: Vocabulary.proto
// Protobuf C++ Version: 5.30.0-dev

#ifndef Vocabulary_2eproto_2epb_2eh
#define Vocabulary_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5030000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Vocabulary_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Vocabulary_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Vocabulary_2eproto;
class Synonym;
struct SynonymDefaultTypeInternal;
extern SynonymDefaultTypeInternal _Synonym_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Synonym_class_data_;
class Vocabulary;
struct VocabularyDefaultTypeInternal;
extern VocabularyDefaultTypeInternal _Vocabulary_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Vocabulary_class_data_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class Synonym final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Synonym) */ {
 public:
  inline Synonym() : Synonym(nullptr) {}
  ~Synonym() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Synonym* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Synonym));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Synonym(
      ::google::protobuf::internal::ConstantInitialized);

  inline Synonym(const Synonym& from) : Synonym(nullptr, from) {}
  inline Synonym(Synonym&& from) noexcept
      : Synonym(nullptr, std::move(from)) {}
  inline Synonym& operator=(const Synonym& from) {
    CopyFrom(from);
    return *this;
  }
  inline Synonym& operator=(Synonym&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Synonym& default_instance() {
    return *internal_default_instance();
  }
  static inline const Synonym* internal_default_instance() {
    return reinterpret_cast<const Synonym*>(
        &_Synonym_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Synonym& a, Synonym& b) { a.Swap(&b); }
  inline void Swap(Synonym* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Synonym* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Synonym* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Synonym>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Synonym& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Synonym& from) { Synonym::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Synonym* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Synonym"; }

 protected:
  explicit Synonym(::google::protobuf::Arena* arena);
  Synonym(::google::protobuf::Arena* arena, const Synonym& from);
  Synonym(::google::protobuf::Arena* arena, Synonym&& from) noexcept
      : Synonym(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSynonymFieldNumber = 2,
    kTurkishMeaningFieldNumber = 3,
    kSampleSentencesFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // string synonym = 2;
  void clear_synonym() ;
  const std::string& synonym() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_synonym(Arg_&& arg, Args_... args);
  std::string* mutable_synonym();
  PROTOBUF_NODISCARD std::string* release_synonym();
  void set_allocated_synonym(std::string* value);

  private:
  const std::string& _internal_synonym() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_synonym(
      const std::string& value);
  std::string* _internal_mutable_synonym();

  public:
  // string turkish_meaning = 3;
  void clear_turkish_meaning() ;
  const std::string& turkish_meaning() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_turkish_meaning(Arg_&& arg, Args_... args);
  std::string* mutable_turkish_meaning();
  PROTOBUF_NODISCARD std::string* release_turkish_meaning();
  void set_allocated_turkish_meaning(std::string* value);

  private:
  const std::string& _internal_turkish_meaning() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_turkish_meaning(
      const std::string& value);
  std::string* _internal_mutable_turkish_meaning();

  public:
  // string sample_sentences = 4;
  void clear_sample_sentences() ;
  const std::string& sample_sentences() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sample_sentences(Arg_&& arg, Args_... args);
  std::string* mutable_sample_sentences();
  PROTOBUF_NODISCARD std::string* release_sample_sentences();
  void set_allocated_sample_sentences(std::string* value);

  private:
  const std::string& _internal_sample_sentences() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sample_sentences(
      const std::string& value);
  std::string* _internal_mutable_sample_sentences();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:Synonym)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      54, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Synonym& from_msg);
    ::google::protobuf::internal::ArenaStringPtr synonym_;
    ::google::protobuf::internal::ArenaStringPtr turkish_meaning_;
    ::google::protobuf::internal::ArenaStringPtr sample_sentences_;
    ::int32_t id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Vocabulary_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Synonym_class_data_;
// -------------------------------------------------------------------

class Vocabulary final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Vocabulary) */ {
 public:
  inline Vocabulary() : Vocabulary(nullptr) {}
  ~Vocabulary() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Vocabulary* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Vocabulary));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Vocabulary(
      ::google::protobuf::internal::ConstantInitialized);

  inline Vocabulary(const Vocabulary& from) : Vocabulary(nullptr, from) {}
  inline Vocabulary(Vocabulary&& from) noexcept
      : Vocabulary(nullptr, std::move(from)) {}
  inline Vocabulary& operator=(const Vocabulary& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vocabulary& operator=(Vocabulary&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vocabulary& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vocabulary* internal_default_instance() {
    return reinterpret_cast<const Vocabulary*>(
        &_Vocabulary_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Vocabulary& a, Vocabulary& b) { a.Swap(&b); }
  inline void Swap(Vocabulary* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vocabulary* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vocabulary* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Vocabulary>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Vocabulary& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Vocabulary& from) { Vocabulary::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Vocabulary* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "Vocabulary"; }

 protected:
  explicit Vocabulary(::google::protobuf::Arena* arena);
  Vocabulary(::google::protobuf::Arena* arena, const Vocabulary& from);
  Vocabulary(::google::protobuf::Arena* arena, Vocabulary&& from) noexcept
      : Vocabulary(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSynonymsRelatedWordsFieldNumber = 2,
    kWordFieldNumber = 1,
    kMacmillanUrlFieldNumber = 3,
    kYouglishUrlFieldNumber = 4,
    kReversoUrlFieldNumber = 5,
  };
  // repeated .Synonym synonyms_related_words = 2;
  int synonyms_related_words_size() const;
  private:
  int _internal_synonyms_related_words_size() const;

  public:
  void clear_synonyms_related_words() ;
  ::Synonym* mutable_synonyms_related_words(int index);
  ::google::protobuf::RepeatedPtrField<::Synonym>* mutable_synonyms_related_words();

  private:
  const ::google::protobuf::RepeatedPtrField<::Synonym>& _internal_synonyms_related_words() const;
  ::google::protobuf::RepeatedPtrField<::Synonym>* _internal_mutable_synonyms_related_words();
  public:
  const ::Synonym& synonyms_related_words(int index) const;
  ::Synonym* add_synonyms_related_words();
  const ::google::protobuf::RepeatedPtrField<::Synonym>& synonyms_related_words() const;
  // string word = 1;
  void clear_word() ;
  const std::string& word() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_word(Arg_&& arg, Args_... args);
  std::string* mutable_word();
  PROTOBUF_NODISCARD std::string* release_word();
  void set_allocated_word(std::string* value);

  private:
  const std::string& _internal_word() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_word(
      const std::string& value);
  std::string* _internal_mutable_word();

  public:
  // string macmillan_url = 3;
  void clear_macmillan_url() ;
  const std::string& macmillan_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_macmillan_url(Arg_&& arg, Args_... args);
  std::string* mutable_macmillan_url();
  PROTOBUF_NODISCARD std::string* release_macmillan_url();
  void set_allocated_macmillan_url(std::string* value);

  private:
  const std::string& _internal_macmillan_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_macmillan_url(
      const std::string& value);
  std::string* _internal_mutable_macmillan_url();

  public:
  // string youglish_url = 4;
  void clear_youglish_url() ;
  const std::string& youglish_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_youglish_url(Arg_&& arg, Args_... args);
  std::string* mutable_youglish_url();
  PROTOBUF_NODISCARD std::string* release_youglish_url();
  void set_allocated_youglish_url(std::string* value);

  private:
  const std::string& _internal_youglish_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_youglish_url(
      const std::string& value);
  std::string* _internal_mutable_youglish_url();

  public:
  // string reverso_url = 5;
  void clear_reverso_url() ;
  const std::string& reverso_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_reverso_url(Arg_&& arg, Args_... args);
  std::string* mutable_reverso_url();
  PROTOBUF_NODISCARD std::string* release_reverso_url();
  void set_allocated_reverso_url(std::string* value);

  private:
  const std::string& _internal_reverso_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reverso_url(
      const std::string& value);
  std::string* _internal_mutable_reverso_url();

  public:
  // @@protoc_insertion_point(class_scope:Vocabulary)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Vocabulary& from_msg);
    ::google::protobuf::RepeatedPtrField< ::Synonym > synonyms_related_words_;
    ::google::protobuf::internal::ArenaStringPtr word_;
    ::google::protobuf::internal::ArenaStringPtr macmillan_url_;
    ::google::protobuf::internal::ArenaStringPtr youglish_url_;
    ::google::protobuf::internal::ArenaStringPtr reverso_url_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Vocabulary_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Vocabulary_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Synonym

// int32 id = 1;
inline void Synonym::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t Synonym::id() const {
  // @@protoc_insertion_point(field_get:Synonym.id)
  return _internal_id();
}
inline void Synonym::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Synonym.id)
}
inline ::int32_t Synonym::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void Synonym::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// string synonym = 2;
inline void Synonym::clear_synonym() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.synonym_.ClearToEmpty();
}
inline const std::string& Synonym::synonym() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Synonym.synonym)
  return _internal_synonym();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Synonym::set_synonym(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.synonym_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Synonym.synonym)
}
inline std::string* Synonym::mutable_synonym() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_synonym();
  // @@protoc_insertion_point(field_mutable:Synonym.synonym)
  return _s;
}
inline const std::string& Synonym::_internal_synonym() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.synonym_.Get();
}
inline void Synonym::_internal_set_synonym(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.synonym_.Set(value, GetArena());
}
inline std::string* Synonym::_internal_mutable_synonym() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.synonym_.Mutable( GetArena());
}
inline std::string* Synonym::release_synonym() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Synonym.synonym)
  return _impl_.synonym_.Release();
}
inline void Synonym::set_allocated_synonym(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.synonym_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.synonym_.IsDefault()) {
    _impl_.synonym_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Synonym.synonym)
}

// string turkish_meaning = 3;
inline void Synonym::clear_turkish_meaning() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turkish_meaning_.ClearToEmpty();
}
inline const std::string& Synonym::turkish_meaning() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Synonym.turkish_meaning)
  return _internal_turkish_meaning();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Synonym::set_turkish_meaning(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turkish_meaning_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Synonym.turkish_meaning)
}
inline std::string* Synonym::mutable_turkish_meaning() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_turkish_meaning();
  // @@protoc_insertion_point(field_mutable:Synonym.turkish_meaning)
  return _s;
}
inline const std::string& Synonym::_internal_turkish_meaning() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.turkish_meaning_.Get();
}
inline void Synonym::_internal_set_turkish_meaning(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turkish_meaning_.Set(value, GetArena());
}
inline std::string* Synonym::_internal_mutable_turkish_meaning() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.turkish_meaning_.Mutable( GetArena());
}
inline std::string* Synonym::release_turkish_meaning() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Synonym.turkish_meaning)
  return _impl_.turkish_meaning_.Release();
}
inline void Synonym::set_allocated_turkish_meaning(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.turkish_meaning_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.turkish_meaning_.IsDefault()) {
    _impl_.turkish_meaning_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Synonym.turkish_meaning)
}

// string sample_sentences = 4;
inline void Synonym::clear_sample_sentences() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sample_sentences_.ClearToEmpty();
}
inline const std::string& Synonym::sample_sentences() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Synonym.sample_sentences)
  return _internal_sample_sentences();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Synonym::set_sample_sentences(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sample_sentences_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Synonym.sample_sentences)
}
inline std::string* Synonym::mutable_sample_sentences() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sample_sentences();
  // @@protoc_insertion_point(field_mutable:Synonym.sample_sentences)
  return _s;
}
inline const std::string& Synonym::_internal_sample_sentences() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sample_sentences_.Get();
}
inline void Synonym::_internal_set_sample_sentences(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sample_sentences_.Set(value, GetArena());
}
inline std::string* Synonym::_internal_mutable_sample_sentences() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.sample_sentences_.Mutable( GetArena());
}
inline std::string* Synonym::release_sample_sentences() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Synonym.sample_sentences)
  return _impl_.sample_sentences_.Release();
}
inline void Synonym::set_allocated_sample_sentences(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sample_sentences_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sample_sentences_.IsDefault()) {
    _impl_.sample_sentences_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Synonym.sample_sentences)
}

// -------------------------------------------------------------------

// Vocabulary

// string word = 1;
inline void Vocabulary::clear_word() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.word_.ClearToEmpty();
}
inline const std::string& Vocabulary::word() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Vocabulary.word)
  return _internal_word();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Vocabulary::set_word(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.word_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Vocabulary.word)
}
inline std::string* Vocabulary::mutable_word() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_word();
  // @@protoc_insertion_point(field_mutable:Vocabulary.word)
  return _s;
}
inline const std::string& Vocabulary::_internal_word() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.word_.Get();
}
inline void Vocabulary::_internal_set_word(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.word_.Set(value, GetArena());
}
inline std::string* Vocabulary::_internal_mutable_word() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.word_.Mutable( GetArena());
}
inline std::string* Vocabulary::release_word() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Vocabulary.word)
  return _impl_.word_.Release();
}
inline void Vocabulary::set_allocated_word(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.word_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.word_.IsDefault()) {
    _impl_.word_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Vocabulary.word)
}

// repeated .Synonym synonyms_related_words = 2;
inline int Vocabulary::_internal_synonyms_related_words_size() const {
  return _internal_synonyms_related_words().size();
}
inline int Vocabulary::synonyms_related_words_size() const {
  return _internal_synonyms_related_words_size();
}
inline void Vocabulary::clear_synonyms_related_words() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.synonyms_related_words_.Clear();
}
inline ::Synonym* Vocabulary::mutable_synonyms_related_words(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:Vocabulary.synonyms_related_words)
  return _internal_mutable_synonyms_related_words()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::Synonym>* Vocabulary::mutable_synonyms_related_words()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Vocabulary.synonyms_related_words)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_synonyms_related_words();
}
inline const ::Synonym& Vocabulary::synonyms_related_words(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Vocabulary.synonyms_related_words)
  return _internal_synonyms_related_words().Get(index);
}
inline ::Synonym* Vocabulary::add_synonyms_related_words() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::Synonym* _add = _internal_mutable_synonyms_related_words()->Add();
  // @@protoc_insertion_point(field_add:Vocabulary.synonyms_related_words)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::Synonym>& Vocabulary::synonyms_related_words() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Vocabulary.synonyms_related_words)
  return _internal_synonyms_related_words();
}
inline const ::google::protobuf::RepeatedPtrField<::Synonym>&
Vocabulary::_internal_synonyms_related_words() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.synonyms_related_words_;
}
inline ::google::protobuf::RepeatedPtrField<::Synonym>*
Vocabulary::_internal_mutable_synonyms_related_words() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.synonyms_related_words_;
}

// string macmillan_url = 3;
inline void Vocabulary::clear_macmillan_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.macmillan_url_.ClearToEmpty();
}
inline const std::string& Vocabulary::macmillan_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Vocabulary.macmillan_url)
  return _internal_macmillan_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Vocabulary::set_macmillan_url(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.macmillan_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Vocabulary.macmillan_url)
}
inline std::string* Vocabulary::mutable_macmillan_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_macmillan_url();
  // @@protoc_insertion_point(field_mutable:Vocabulary.macmillan_url)
  return _s;
}
inline const std::string& Vocabulary::_internal_macmillan_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.macmillan_url_.Get();
}
inline void Vocabulary::_internal_set_macmillan_url(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.macmillan_url_.Set(value, GetArena());
}
inline std::string* Vocabulary::_internal_mutable_macmillan_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.macmillan_url_.Mutable( GetArena());
}
inline std::string* Vocabulary::release_macmillan_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Vocabulary.macmillan_url)
  return _impl_.macmillan_url_.Release();
}
inline void Vocabulary::set_allocated_macmillan_url(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.macmillan_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.macmillan_url_.IsDefault()) {
    _impl_.macmillan_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Vocabulary.macmillan_url)
}

// string youglish_url = 4;
inline void Vocabulary::clear_youglish_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.youglish_url_.ClearToEmpty();
}
inline const std::string& Vocabulary::youglish_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Vocabulary.youglish_url)
  return _internal_youglish_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Vocabulary::set_youglish_url(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.youglish_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Vocabulary.youglish_url)
}
inline std::string* Vocabulary::mutable_youglish_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_youglish_url();
  // @@protoc_insertion_point(field_mutable:Vocabulary.youglish_url)
  return _s;
}
inline const std::string& Vocabulary::_internal_youglish_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.youglish_url_.Get();
}
inline void Vocabulary::_internal_set_youglish_url(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.youglish_url_.Set(value, GetArena());
}
inline std::string* Vocabulary::_internal_mutable_youglish_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.youglish_url_.Mutable( GetArena());
}
inline std::string* Vocabulary::release_youglish_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Vocabulary.youglish_url)
  return _impl_.youglish_url_.Release();
}
inline void Vocabulary::set_allocated_youglish_url(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.youglish_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.youglish_url_.IsDefault()) {
    _impl_.youglish_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Vocabulary.youglish_url)
}

// string reverso_url = 5;
inline void Vocabulary::clear_reverso_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reverso_url_.ClearToEmpty();
}
inline const std::string& Vocabulary::reverso_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Vocabulary.reverso_url)
  return _internal_reverso_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Vocabulary::set_reverso_url(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reverso_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Vocabulary.reverso_url)
}
inline std::string* Vocabulary::mutable_reverso_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_reverso_url();
  // @@protoc_insertion_point(field_mutable:Vocabulary.reverso_url)
  return _s;
}
inline const std::string& Vocabulary::_internal_reverso_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.reverso_url_.Get();
}
inline void Vocabulary::_internal_set_reverso_url(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reverso_url_.Set(value, GetArena());
}
inline std::string* Vocabulary::_internal_mutable_reverso_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.reverso_url_.Mutable( GetArena());
}
inline std::string* Vocabulary::release_reverso_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:Vocabulary.reverso_url)
  return _impl_.reverso_url_.Release();
}
inline void Vocabulary::set_allocated_reverso_url(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.reverso_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.reverso_url_.IsDefault()) {
    _impl_.reverso_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:Vocabulary.reverso_url)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // Vocabulary_2eproto_2epb_2eh
